//
//  Objc_RuntimeViewController.m
//  Objective-C Runtime-master
//
//  Created by xuran on 16/3/26.
//  Copyright © 2016年 X.R. All rights reserved.
//
//  Objc runtime 使用总结
//  by  X.R

#import <UIKit/UIKit.h>
#import <objc/runtime.h>

@interface Person : NSObject
@property (copy, nonatomic) NSString * name;

- (void)printHi;
- (void)printHello;
@end

@implementation Person

- (void)printHello {
    
    NSLog(@"Hello...");
}

- (void)printHi {
    
    NSLog(@"Hi...");
}

@end

/** 为类别动态扩展属性 */

static const char refreshViewKey;
@interface UITableView (RefreshView)
@property (strong, nonatomic) UIView * refreshView;
@end

@implementation UITableView (RefreshView)

- (UIView *)refreshView {
    
    return objc_getAssociatedObject(self, &refreshViewKey);
}

- (void)setRefreshView:(UIView *)refreshView {
    
    objc_setAssociatedObject(self, &refreshViewKey, refreshView, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

@end

#import "Objc_RuntimeViewController.h"
#import "UIAlertView+CallBlock.h"
#import "UIViewController+AlertView.h"

@interface Objc_RuntimeViewController ()

@end

@implementation Objc_RuntimeViewController


- (void)viewDidLoad {
    [super viewDidLoad];
    
    [self dynamicModifyProperty];
    [self dynamicExchangeMethods];
    [self dynamicAddMethod];
}

#pragma mark - Methods
#pragma mark - runtime 使用总结

/** 动态修改属性的值 */
- (void)dynamicModifyProperty {
    
    Person * p = [[Person alloc] init];
    p.name = @"刘老大";
    
    // 动态替换
    // 动态获取类中的所有属性
    u_int count = 0;
    Ivar * ivar = class_copyIvarList([p class], &count);
    
    for (int i = 0; i < count; i++) {
        Ivar var = ivar[i];
        const char* ivarName = ivar_getName(var);
        NSString * propertyName = [NSString stringWithCString:ivarName encoding:NSUTF8StringEncoding];
        
        if ([propertyName isEqualToString:@"_name"]) {
            object_setIvar(p, var, @"大傻儿");
            break;
        }
    }
    
    NSLog(@"modify_end: %@", p.name);
}

/** 动态交换方法 */
- (void)dynamicExchangeMethods {
    
    Person * pers = [[Person alloc] init];
    NSLog(@"exchange before:");
    [pers printHello];
    [pers printHi];
    
    // 动态找到两个方法
    Method m1 = class_getInstanceMethod([pers class], @selector(printHi));
    Method m2 = class_getInstanceMethod([pers class], @selector(printHello));
    // 交换
    method_exchangeImplementations(m1, m2);
    
    NSLog(@"exchange after:");
    [pers printHello];
    [pers printHi];
}

/** 动态添加方法 */
- (void)dynamicAddMethod {
    
    Person * p = [[Person alloc] init];
    // 动态添加print方法  "var@:@@" 表示：该方法有两个参数，返回值为Void
    class_addMethod([p class], @selector(print:), (IMP)printAnswer, "v@:@");
    
    if ([p respondsToSelector:@selector(print:)]) {
        [p performSelector:@selector(print:)];
    }else {
        NSLog(@"not print method");
    }
}

void printAnswer(id SELF, SEL _cmd) {
    
    NSLog(@"print...");
}

#pragma mark - IBMethods

- (IBAction)showAlertViewAction:(id)sender {
    
#if 0
    UIAlertView * alertView = [[UIAlertView alloc] initWithTitle:@"这是一个AlertView" message:@"Alert！" delegate:nil cancelButtonTitle:@"取消" otherButtonTitles:@"确定", nil];
    [alertView show];
    
    [alertView clickButtonAtIndexWithCallBlock:^(UIAlertView *alertView, NSInteger buttonIndex) {
        NSLog(@"AlertView: %@  buttonIndex: %d", alertView, buttonIndex);
    }];
#else
    
    [self showAlertWithTitle:@"这是一个AlertView" message:@"Alert" cancelButtonTitle:@"取消" completion:^(NSInteger buttonIndex) {
        NSLog(@"%d", buttonIndex);
    } otherButtonTitles:@"确定", @"重试", nil];
#endif
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    
}

@end
